<project name="CreditCard" basedir=".">
 
  <property name="lib.dir" value="lib" />  
  <property name="src.dir" value="src/main" />
  <property name="test.dir" value="Test" />

  <property name="build.dir" value="Build"/>
  <property name="results.dir" value="Results"/>
  <property name="reports.dir" value="Reports"/>
		
  <property name="junit.dir" value="${lib.dir}/junit"/>
  <property name="junit.file" value="${junit.dir}/junit-4.10.jar"/>

  <property name="cob.dir" value="${lib.dir}/cobertura-1.9.4.1" />
  <property name="cob.jar.file" value="${cob.dir}/cobertura.jar" />
 
  <property name="cob.instrumented.dir" value="${cob.dir}/instrumented"/>
  <property name="cob.ser.file" value="cobertura.ser"/>

  <property name="selenium.dir" value="${lib.dir}/selenium"/>
  <property name="selenium.server.jar.file" value="${selenium.dir}/selenium-server-standalone-2.25.0.jar"/>	
  	
  <property name="simian.dir" value="${lib.dir}/simian-2.3.33"/>	
  <property name="simian.file" value="${simian.dir}/simian-2.3.33.jar"/> 	
  <property name="simianthreshold" value="2"/>

	
  <path id="class.path"> 
	<pathelement location="${junit.file}" /> 
	<pathelement location="${selenium.dir}/selenium-java-client-driver.jar" /> 
	<pathelement location="${selenium.server.jar.file}" /> 
	<pathelement location="${selenium.dir}/testng-5.0-jdk15.jar" /> 
	<pathelement location="${build.dir}" /> 
  </path> 
	
	<!-- Rensa undan-->
  <target name="clean">
  	<delete dir="${build.dir}" />
  	<delete dir="${cob.instrumented.dir}" />
  	<delete dir="${reports.dir}" />
    <delete dir="${results.dir}" />
  	<delete file="${cob.ser.file}" />
  </target>

<!-- Skapa Mappstruktur -->
  <target name="prepare" depends="clean">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${cob.instrumented.dir}"/>
    <mkdir dir="${reports.dir}"/>
  	<mkdir dir="${results.dir}"/>
  </target>

<!-- Kompilera koden -->
  <target name="compile" depends="prepare">   
      <javac debug="true" srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" source="1.6" target="1.6" /> 
      <javac debug="true" srcdir="${test.dir}" destdir="${build.dir}" includeAntRuntime="false" source="1.6" target="1.6" > 	
      	<classpath refid="class.path"/>
      </javac>
    </target>
 
    <path id="cobertura.classpath">
      <fileset dir="${lib.dir}">
        <include name="${cob.jar.file}" />
        <include name="**/*.jar" /> 
      </fileset>
    </path>

<!-- Unit tests utan Cobertura -->
  <target name="Unit-test" depends="compile">
    <junit fork="yes" haltonfailure="no" printsummary="yes">
      <classpath refid="class.path"/>
      <batchtest todir="${results.dir}">
        <fileset dir="${test.dir}">
	      <include name="UnitTest\*Test*.java"/>      	
        </fileset>
      </batchtest>
    </junit>
  </target>

	
<!-- instrumentering av filer till Cobertura -->
  <target name="instrument" depends="compile"> 
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    <cobertura-instrument todir="${cob.instrumented.dir}"> 
      <fileset dir="${build.dir}"> 
        <include name="main/*.class"/> 
      </fileset> 
    </cobertura-instrument>
  </target> 
	
	
<!-- Unit tests med Cobertura -->
  <target name="cover-test" depends="instrument">
    <junit fork="yes" haltonfailure="no" printsummary="yes">
      <classpath refid="cobertura.classpath" />
      <classpath>
        <pathelement path="${junit.file}"/>
      </classpath>   
      <classpath location="${cob.instrumented.dir}"/> 
      <classpath location="${build.dir}"/>  
      <formatter type="xml" />
      <batchtest todir="${results.dir}">
        <fileset dir="${test.dir}">
          <include name="UnitTest\*Test*.java"/>  
          <exclude name="UnitTest\*AllTest*.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${results.dir}">
      <fileset dir="${results.dir}">
        <include name="*.xml" />
      </fileset>
    </junitreport>
  </target>

<!-- cobertura coverage rapport
srcdir kräver absolutpath av någon anledning -->
  <target name="coverage-report" depends="cover-test">
    <cobertura-report format="html" srcdir="c:\workspace\CreditCard\src" destdir="${reports.dir}" />
    <cobertura-report format="xml" srcdir="c:\workspace\CreditCard\src" destdir="${reports.dir}" />
    <delete dir="${cob.instrumented.dir}" />
    <delete file="${cob.ser.file}" />
  </target>

<!-- Simian Code duplication detection-->
  <target name="simian" depends="coverage-report">
	<taskdef resource="simiantask.properties" classpath="${simian.file}"/>
  	<simian language="java" threshold="${simianthreshold}" failOnDuplication="true">
  	  <fileset dir="${src.dir}">
        <include name="**/*.java"/>
  		<exclude name="**/*Test*.java"/>
  	  </fileset>
  	 <formatter type="xml" toFile="${results.dir}/similian-log.xml"/>
     <formatter type="plain" toFile="${reports.dir}/similian-log.txt"/> 
    </simian>
  </target>
  	
<!-- Tester som körs med Selenium-->	
	<target name="all_selenium_tests" depends="compile" 
	  description="The Main Target for running all tests"> 
	  <antcall target="run_junit_tests_requiring_server_started"/> 
	</target> 
		
	<target name="run_junit_tests_requiring_server_started"> 
	  <parallel>
	    <antcall target="start-selenium-server"/> 
	    <junit printsummary="yes" fork="yes" errorproperty="junit.error" failureproperty="junit.error"> 
	      <classpath refid="class.path" /> 
	      <formatter type="xml" /> 
	      <batchtest todir="${results.dir}">
	        <fileset dir="${test.dir}">
	          <include name="SeleniumTest/*.java"/>
	        </fileset>
	      </batchtest>
	    </junit> 
	  </parallel>
	  <antcall target="report-junit"/> 
	  <antcall target="stop-selenium-server"/> 
	  <fail if="junit.error" message="Selenium test(s) failed. See reports!"/>
	</target> 

	<target name="report-junit"> 
	  <junitreport todir="${reports.dir}"> 
	    <fileset dir="${results.dir}"> 
	      <include name="*.xml"/> 
	    </fileset> 
	  </junitreport> 
	</target> 


	<target name="start-selenium-server"> 
	  <java jar="${selenium.server.jar.file}" fork="true" spawn="true" /> 
	  <waitfor maxwait="1" maxwaitunit="minute" checkevery="100"> 
	    <http url="http://localhost:4444/selenium-server/driver/?cmd=testComplete"/> 
	  </waitfor> 
	</target> 


	<target name="stop-selenium-server">  
	  <get taskname="selenium-shutdown" 
	  src="http://localhost:4444/selenium-server/driver/?cmd=shutDownSeleniumServer" 
	  dest="${results.dir}\selenium-shutdown-output.txt" 
	  ignoreerrors="true" /> 
	</target> 
	
	<property name="robot.dir" value="${lib.dir}/robotant" />
	<property name="robotant.file" value="${robot.dir}/ant-robotframework-0.6.jar" />
	<property name="robotframework.file" value="${robot.dir}/robotframework-2.7.3.jar" />
	<property name="robottest.dir" value="${test.dir}/RobotTest" />
	 
	<target name="Robot_Framework_testing" 
		depends="compile"> 
		<taskdef name="robotant" 
			classpath="${robotant.file}" 
			classname="org.lcx.robotframework.ant.RobotAnt"/> 
		<robotant fork="true" 
			jar="${robotframework.file}" 
			outputdir="${reports.dir}" 
			debugfile="jybot.log" 
			loglevel="INFO" 
			data_sources="${robottest.dir}"> 
	</robotant> 
	</target>

	 
</project>
  	
